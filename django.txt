sudo apt install python3

sudo apt install python3-pip



pip install virtualenv    //for installing virtual env
virtualenv <virtualenv_name>

. <my_env_name>/bin/activate   //cmd for activating virtual envirnment
. venv/bin/activate
------------------------------vritual envirnmentinstalltion------------
python3 -m venv  <virtual_envName>
for activating new venv just open new terminal


source djangoenv/bin/activate             //Activation of virtualenv   //how to crate virtual envirnment in django by javatpoint
djangoenv is the name of our virtual env
----------------------end of venv-------------


python3   ---->for seeing the version 

python3 -m pip install Django

djanog-admin --->for verifying

if multiple routes are there then django will match with it's first route and if first route doesn't match then only it will go for second url to match.
urlpatterns = [
    path('<int:day>/', views.monthly_challenge_byNumeber),
    path('<str:month>/', views.monthly_challenge),
]



  return HttpResponseRedirect("/challenge/" + redirect_month)  --->means match this url from starting
  return HttpResponseRedirect("challenge/" + redirect_month)  --->means append in the current url
  
  # if we are using templates files(like .html) inside the app then we don't need to any setting inside the settings.py.
---------------------  how to use templates in project level-------------------------------------
  import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR,'templates')
Specify this TEMPLATE_DIR inside settings.py as follows
TEMPLATES = [
{
...,
'DIRS': [TEMPLATE_DIR,],      //on project level we define base.html 
},]
  
  # if we are using static files(like image,css) inside the app then we don't need to any setting inside the settings.py.
  -------------how to use static files in project level----------------------
STATIC_DIR=os.path.join(BASE_DIR,'static')
..
STATIC_URL = '/static/'
STATICFILES_DIRS=[
STATIC_DIR,
]   

make migration command is run from main project

python3 manage.py shell         ----->for working with shell and to view our database data

books.objects.get()    ---->in case of multiple response it will give error.
books.objects.filter()  -------> in case of multiple response it will not give error.
we should use filter() if our query may return multiple value.


related_name and modelclassname_set is used to make a relation between parent and child class.
foreign key ----->is used for one to many relationship.
OneToOneField() ---->is used for one to one relationship

in ModelForm we can call save method directly on object.
in normal form (formsForm) we can we will have to instanctiante an model object then only we can save it.


how to pass the id from urls.py to views.py in django: (video no 156 of udemy).
def get_Context_data(self,**kwargs):
	review_id=kwargs['id']
	
	
in the listView we can return data by applying some filteration of all data:
def get_quetyset(self):
	base_query=super().get_queryset();
	data=base_query.filter(id_gt=4)
	return data      //now the data which we are returning that contains only those rows where id is greater than 4.
	

python3 -m pip install pillow

HttpResponseRedirect vs redirect 

cleaned_data[''] is available in 41 page no.
class YourForm(forms.Form):
	if request.method == "POST":
	    form = YourForm(request.POST)   or  form = BlogForm(request.POST,request.FILES)   //if our data contains files then only
	    if form.is_valid():
		cleaned_test = form.cleaned_data["test"]
        
        
        
query property â€“ This property is used to get sql query of query set.


******************working with image field**************
----------------in models.py---------------------
    hotel_Main_Img = models.ImageField(upload_to='images/')
    
product.image is = shop/images/Screenshot_from_2021-08-27_01-56-05.png
product.image.url = /media/shop/images/Screenshot_from_2021-08-27_01-56-05.png
    
--------------------in settings.py--------------------------
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'       //this line is required so that browser can read this image.


----------------in project urls--------
urlpatterns = [
    path('admin/', admin.site.urls),
    path('register', views.hotel_image_view, name='hotel_image_view'),
    path('hotel_images', views.display_hotel_images, name='hotel_images'),
    path('success', views.success, name='success'),
]+static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)     //this line is required


#many to many relationship in django
https://www.geeksforgeeks.org/python-relational-fields-in-django-models/


{% load static %} is added after the after the {% extends base.html %} tag.

{{name|capfirst}}   //here capfirst is the filter.

https://inloop.github.io/sqlite-viewer/             --->for viewing sqllite database content.

How to change django admin text search it ============>> for the changing the django admin text like django administration

admin.site.register is called  ==========>>how to register your model

proper way to register our app in our project
INSTALLED_APPS = [
...
'todos.apps.TodosConfig',
...
]


for any doubt search ====>>making queries in django


------------how to use mysql as a database------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'Ecommerce',
        'USER': 'root',
        'PASSWORD': 'Sharma@123',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}


pip install pymysql
Then, edit the __init__.py file in your project origin dir(the same as settings.py)

add:

import pymysql
pymysql.install_as_MySQLdb()


------------------database connectivity end---------------


----how to add custom field in User model/foreign key concept------------
class employees(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True)    //in db it will become user_id.
    bio = models.TextField()
    mobile = models.CharField(max_length=15)

where user --->column will become user_id in employees table. and it is the foreign key which will point the primary key (id field of User) model.

whenever we make OneToOneField,ForeignField(),ManyToManyField() this field will get created with the name of fieldname_id which is the froeign key which point to the primay key. if primary key is not specified then it will check for id field.
---------------------------------------------------------------

null vs blank
null means it is representing the column of table which can cantain null value.
blank means ti is represnting the form field which blank value is allowed.



---------------------how to perform joins in django by using ORM  or related_name-----------------

whenever we perform query then we get list so while printing we should iterate it.
context['data'] = list(User.objects.filter(emp__bio='klsjfljdf')   ----> it gives User table data. where User is model name and emp is related_name attribute of django.

context['data'] = list(User.objects.filter(employees__bio='klsjfljdf')  ----> it gives User table data. where User is model name and employees is Model name.


---------------how to run our program at different port no----------------
$ python manage.py runserver 4000    				//for executing our command at 4000 port no.
python3 manage.py  runserver 0.0.0.0:8000			

-------------meaning of def __str__(self):----------
   def __str__(self):
        return self.name
for example this 2 lines is written inside the hotel model and when we add the products into the hotel then we will be able to hotel name.
if we will not write def__str__(self). and if we will try to add products into hotel then in the dropdown we will be able to object(1) and object(2).
